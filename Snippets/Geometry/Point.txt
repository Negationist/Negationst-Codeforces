template<typename T>
struct Point {
    T x, y;
    Point() : x(0), y(0) {}
    Point(T _x, T _y) : x(_x), y(_y) {}
    Point operator-(const Point &other) const {
        return Point(this->x - other.x, this->y - other.y);
    }
    Point operator+(const Point &other) const {
        return Point(this->x + other.x, this->y + other.y);
    }
    friend istream &operator>>(istream &in, Point &p) {
        in >> p.x >> p.y;
        return in;
    }
    T operator^(const Point &other) const {
        return (x * other.y) - (other.x * y);
    }
    friend T shoelace(const vector<Point> &a) { // returns double the area
        int n = a.size();
        T sum = 0;
        for(int i = 0; i + 1 < n; i++) {
            sum += (a[i].x * a[i+1].y - a[i].y * a[i+1].x);
        }
        sum += (a[n-1].x * a[0].y - a[n-1].y * a[0].x);
        return abs(sum);
    }
    friend ld dist(const Point &a, const Point &b){
        ld dx = a.x-b.x, dy = a.y-b.y;
        return sqrt(dx*dx + dy*dy);
    }
    friend ld s_dist(const Point &a, const Point &b){
        ld dx = a.x-b.x, dy = a.y-b.y;
        return (dx*dx + dy*dy);
    }
    void debug() const {
        std::cout << "this point is (" << x << ", " << y << ")\n";
    }
};
