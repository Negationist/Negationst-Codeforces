struct Matrix{
    vector<vi> cell;
    int n,m;
    Matrix(int x, int y){
        n = x;
        m = y;
        cell.assign(n,vi(m,0));
    }
    Matrix operator*(const Matrix& other){
        int x = n;
        int y = other.m;
        Matrix res(x,y);
        if(m!=other.n){
            cout << "check indexing!\n";
        } else{
            for(int i=0;i<x;i++){
                for(int j=0;j<y;j++){
                    for(int k=0;k<m;k++){
                        //int inc = (cell[i][k]*other.cell[k][j]);
                        //res.cell[i][j]+=inc;
                        int inc = (cell[i][k]*other.cell[k][j])%mod;
                        res.cell[i][j]+=inc;
                        res.cell[i][j]%=mod;
                    }
                }
            }
        }
        return res;
    }
    void update(int i, int j, int num){
        if(i<n && j<m){
            cell[i][j] = num;
        } else{
            cout << "check indexing!\n";
        }
    }
    void identity(){
        if(n!=m){
            cout << "check indexing!\n";
            return;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==j){
                    cell[i][j] = 1;
                } else{
                    cell[i][j] = 0;
                }
            }
        }
    }
    void debug(){
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                cout << cell[i][j] << " ";
            }
            cout << "\n";
        }
        cout << "\n";
    }
    void normalize(int mod){
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                cell[i][j]%=mod;
            }
        }
    }
    Matrix powMod(int p, int mod){
        Matrix res(n,m);
        Matrix temp = *this;
        temp.normalize(mod);
        res.identity();
        if(n!=m){
            cout << "check indexing!\n";
        }
        while(p>0){
            if(p&1){
                res = res*temp;
            }
            p/=2;
            temp = temp*temp;
        }
        return res;
    }
};
